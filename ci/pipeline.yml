---
resource_types:
- name: http-jq-resource
  type: docker-image
  source:
    username: ((dockerhub_user))
    password: ((dockerhub_password))
    repository: qudini/concourse-http-jq-resource
    tag: latest

resources:
- name: golang-http-jq-release
  type: http-jq-resource
  source:
    base_url: https://go.dev/dl/?mode=json
    jq_filter: .[] | recurse(.files[]?) | select( .os == "linux" and .arch =="amd64") | select(.version|startswith("go1.18")) | {go_filename:.filename}


- name: pcfops-docker-tag
  type: semver
  source:
    driver: s3
    key: docker-tag
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: pcfops-github
  type: git
  source:
    uri: git@github.com:EngineerBetter/pcfops-docker.git
    branch: master
    private_key: ((github_private_key))

- name: pcfops-image
  type: docker-image
  source:
    username: ((dockerhub_user))
    password: ((dockerhub_password))
    repository: engineerbetter/pcf-ops

- name: terraform-github-release
  type: github-release
  source:
    owner: hashicorp
    repository: terraform
    access_token: ((github_access_token)) # Avoids rate limits
    semver_constraint: ~0.12.x

- name: cosign-github-release
  type: github-release
  source:
    owner: sigstore
    repository: cosign
    access_token: ((github_access_token)) # Avoids rate limits

- name: terraform-s3-release
  type: s3
  source:
    versioned_file: terraform/terraform
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: cf-cli-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: cli
    access_token: ((github_access_token)) # Avoids rate limits
    tag_filter: v?([^v].*)$

- name: cf-cli-s3-release
  type: s3
  source:
    versioned_file: cf/cf
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: jq-github-release
  type: github-release
  source:
    owner: stedolan
    repository: jq
    access_token: ((github_access_token)) # Avoids rate limits

- name: om-github-release
  type: github-release
  source:
    owner: pivotal-cf
    repository: om
    access_token: ((github_access_token)) # Avoids rate limits

- name: concourse-github-release
  type: github-release
  source:
    owner: concourse
    repository: concourse
    access_token: ((github_access_token)) # Avoids rate limits

- name: bosh-s3-release
  type: s3
  source:
    bucket: bosh-cli-artifacts
    regexp: 'bosh-cli-(6\.\d+(\.\d+)?)-linux-amd64'

- name: bbl-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: bosh-bootloader
    access_token: ((github_access_token)) # Avoids rate limits

- name: yq-github-release
  type: github-release
  source:
    owner: mikefarah
    repository: yq
    access_token: ((github_access_token)) # Avoids rate limits

- name: kapp-github-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: carvel-kapp
    access_token: ((github_access_token)) # Avoids rate limits

- name: kbld-github-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: carvel-kbld
    access_token: ((github_access_token)) # Avoids rate limits

- name: ytt-github-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: carvel-ytt
    access_token: ((github_access_token)) # Avoids rate limits

- name: golang-s3-release
  type: s3
  source:
    versioned_file: golang/go-linux-amd64.tar.gz
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: cosign-s3-release
  type: s3
  source:
    versioned_file: cosign/cosign.deb
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: kf-s3-release
  type: s3
  source:
    endpoint: storage.googleapis.com
    bucket: kf-releases
    regexp: 'v(2\.\d+(\.\d+)?)/kf-linux'

- name: base-image
  type: docker-image
  source:
    username: ((dockerhub_user))
    password: ((dockerhub_password))
    repository: cloudfoundry/cflinuxfs3

- name: aws-cli-git
  type: git
  source:
    uri: https://github.com/aws/aws-cli.git
    branch: v2
    tag_filter: 2.*.*

- name: aws-cli-s3-release
  type: s3
  source:
    versioned_file: aws-cli/awscli-exe-linux-x86_64.zip
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: cf-uaac-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: cf-uaac
    access_token: ((github_access_token)) # Avoids rate limits

- name: credhub-cli-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: credhub-cli
    access_token: ((github_access_token)) # Avoids rate limits

- name: certstrap-github-release
  type: github-release
  source:
    owner: square
    repository: certstrap
    access_token: ((github_access_token))

- name: kubernetes-github-release
  type: github-release
  source:
    owner: kubernetes
    repository: kubernetes
    access_token: ((github_access_token))

- name: kubectl-s3-release
  type: s3
  source:
    versioned_file: kubectl/kubectl
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

- name: yaml2json-github-release
  type: github-release
  source:
    owner: wakeful
    repository: yaml2json
    access_token: ((github_access_token))

- name: golangci-lint-release
  type: github-release
  source:
    owner: golangci
    repository: golangci-lint
    access_token: ((github_access_token))

- name: bbr-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((github_access_token))

- name: helm-github-release
  type: github-release
  source:
    owner: helm
    repository: helm
    access_token: ((github_access_token))

- name: helm-s3-release
  type: s3
  source:
    versioned_file: helm/helm
    bucket: pcf-docker-pipeline
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: eu-west-1

jobs:
- name: set-pipeline
  serial: true
  plan:
  - get: pcfops-github
    trigger: true
  - set_pipeline: self
    file: pcfops-github/ci/pipeline.yml

- name: get-kubectl
  public: true
  serial: true
  plan:
  - get: kubernetes-github-release
    trigger: true
  - task: download
    config:
      platform: linux
      inputs:
      - name: kubernetes-github-release
      outputs:
      - name: kubectl
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: ash
        args:
        - -xc
        - |
          set -euo pipefail
          version=$(cat kubernetes-github-release/version)
          url="https://dl.k8s.io/v${version}/kubernetes-client-linux-amd64.tar.gz"
          wget -O kubernetes-client.tar.gz "$url"
          tar -xf kubernetes-client.tar.gz
          cp kubernetes/client/bin/kubectl kubectl/
  - put: kubectl-s3-release
    params: {file: kubectl/kubectl}

- name: get-helm
  public: true
  serial: true
  plan:
  - get: helm-github-release
    trigger: true
  - task: download
    config:
      platform: linux
      inputs:
      - name: helm-github-release
      outputs:
      - name: helm
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: ash
        args:
        - -xc
        - |
          set -euo pipefail
          version=$(cat helm-github-release/version)
          url="https://get.helm.sh/helm-v${version}-linux-amd64.tar.gz"
          wget -O helm.tar.gz "$url"
          tar -xf helm.tar.gz
          cp linux-amd64/helm helm/
  - put: helm-s3-release
    params: {file: helm/helm}

- name: get-terraform
  public: true
  serial: true
  plan:
  - get: terraform-github-release
    trigger: true
  - task: download
    config:
      platform: linux
      inputs:
      - name: terraform-github-release
      outputs:
      - name: terraform
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: ash
        args:
        - -c
        - |
          set -euo pipefail
          version=$(cat terraform-github-release/version)
          url="https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip"
          wget -O terraform.zip "$url"
          unzip -d terraform terraform.zip
  - put: terraform-s3-release
    params: {file: terraform/terraform}

- name: get-cf-cli
  public: true
  serial: true
  plan:
  - get: cf-cli-github-release
    trigger: true
  - task: download
    config:
      platform: linux
      inputs:
      - name: cf-cli-github-release
      outputs:
      - name: cf
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: ash
        args:
        - -c
        - |
          set -euo pipefail
          version=$(cat cf-cli-github-release/version)
          url="https://packages.cloudfoundry.org/stable?release=linux64-binary&version=${version}&source=github-rel"
          wget -O cli.tgz "$url"
          tar -C cf -xzf cli.tgz
  - put: cf-cli-s3-release
    params: {file: cf/cf}

- name: get-aws-cli
  public: true
  serial: true
  plan:
  - get: aws-cli-git
    trigger: true
  - task: download
    config:
      platform: linux
      outputs:
      - name: aws-cli
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: ash
        args:
        - -c
        - |
          set -euo pipefail
          url="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
          wget -O aws-cli/awscli-exe-linux-x86_64.zip "$url"
  - put: aws-cli-s3-release
    params: {file: aws-cli/awscli-exe-linux-x86_64.zip}


- name: get-golang
  public: true
  serial: true
  plan:
  - get: golang-http-jq-release
    trigger: true
  - task: download
    config:
      platform: linux
      inputs:
      - name: golang-http-jq-release
      outputs:
      - name: golang-tar
      image_resource:
        type: docker-image
        source: {repository: badouralix/curl-jq}
      run:
        path: ash
        args:
        - -xc
        - |
          set -euo pipefail
          GO_FILENAME=$(jq -r .go_filename golang-http-jq-release/version)
          URL="https://go.dev/dl/$GO_FILENAME"
          wget -q -O golang-tar/go-linux-amd64.tar.gz "$URL"

  - put: golang-s3-release
    params: {file: golang-tar/go-linux-amd64.tar.gz}

- name: get-cosign
  public: true
  serial: true
  plan:
  - get: cosign-github-release
    trigger: true
  - task: download
    config:
      platform: linux
      inputs:
      - name: cosign-github-release
      outputs:
      - name: cosign
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: ash
        args:
        - -c
        - |
          set -euo pipefail
          version=$(cat cosign-github-release/version)
          url="https://github.com/sigstore/cosign/releases/download/v${version}/cosign_${version/v/}_amd64.deb"
          wget -q -O cosign/cosign.deb "$url"
  - put: cosign-s3-release
    params: {file: cosign/cosign.deb}

- name: build-pcfops-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: pcfops-docker-tag
      params: {bump: minor}
    # Download Dockerfile
    - get: pcfops-github
      trigger: true
      passed: [set-pipeline]
    # Trigger on base image updates
    - get: base-image
      trigger: true
    # Download dependancies
    - get: terraform-s3-release
      trigger: true
      passed: [get-terraform]
    - get: cf-cli-s3-release
      trigger: true
      passed: [get-cf-cli]
    - get: jq-github-release
      trigger: true
      params:
        globs: [jq-linux64]
    - get: om-github-release
      trigger: true
      params:
        globs: [om-linux-amd64-*.tar.gz]
    - get: concourse-github-release
      trigger: true
      params:
        globs: [fly-*-linux-amd64.tgz]
    - get: bosh-s3-release
      trigger: true
    - get: bbl-github-release
      trigger: true
      params:
        globs: [bbl-v*_linux_x86-64]
    - get: yq-github-release
      trigger: true
      params:
        globs: [yq_linux_amd64]
    - get: golang-s3-release
      trigger: true
      passed: [get-golang]
    - get: kf-s3-release
      trigger: true
    - get: aws-cli-s3-release
      trigger: true
      passed: [get-aws-cli]
    - get: cf-uaac-github-release
      trigger: true
    - get: credhub-cli-github-release
      trigger: true
      params:
        globs: [credhub-linux-*.tgz]
    - get: certstrap-github-release
      trigger: true
      params:
        globs: [certstrap*linux-amd64]
    - get: golangci-lint-release
      trigger: true
      params:
        globs: [golangci-lint-*-linux-amd64.tar.gz]
    - get: kubectl-s3-release
      trigger: true
      passed: [get-kubectl]
    - get: helm-s3-release
      trigger: true
      passed: [get-helm]
    - get: cosign-s3-release
      trigger: true
      passed: [get-cosign]
    - get: yaml2json-github-release
      trigger: true
      params:
        globs: [yaml2json_*_linux_amd64.tar.gz]
    - get: bbr-release
      trigger: true
      params:
        globs: [bbr-*-linux-amd64]
    - get: kapp-github-release
      trigger: true
      params:
        globs: [kapp-linux-amd64]
    - get: kbld-github-release
      trigger: true
      params:
        globs: [kbld-linux-amd64]
    - get: ytt-github-release
      trigger: true
      params:
        globs: [ytt-linux-amd64]
  # Copy dependencies
  - task: copy
    config:
      platform: linux
      inputs:
      - name: pcfops-github
      - name: terraform-s3-release
      - name: cf-cli-s3-release
      - name: jq-github-release
      - name: om-github-release
      - name: concourse-github-release
      - name: bosh-s3-release
      - name: bbl-github-release
      - name: yq-github-release
      - name: golang-s3-release
      - name: kf-s3-release
      - name: aws-cli-s3-release
      - name: credhub-cli-github-release
      - name: certstrap-github-release
      - name: kubectl-s3-release
      - name: helm-s3-release
      - name: cosign-s3-release
      - name: yaml2json-github-release
      - name: golangci-lint-release
      - name: bbr-release
      - name: kapp-github-release
      - name: kbld-github-release
      - name: ytt-github-release
      outputs:
      - name: builddir
      image_resource:
        type: docker-image
        source:
          repository: alpine
          username: ((dockerhub_user))
          password: ((dockerhub_password))
      run:
        path: ash
        args:
          - -xeuc
          - |
            cp -r pcfops-github/. builddir/
            cp terraform-s3-release/terraform builddir/terraform
            cp cf-cli-s3-release/cf builddir/cf
            cp jq-github-release/jq-linux64 builddir/jq
            tar -C builddir -xzf om-github-release/om-linux-amd64-*.tar.gz
            tar xzf concourse-github-release/fly-*-linux-amd64.tgz -C builddir/
            cp bosh-s3-release/bosh-cli-*-linux-amd64 builddir/bosh
            cp bbl-github-release/bbl-v*_linux_x86-64 builddir/bbl
            cp yq-github-release/yq_linux_amd64 builddir/yq
            cp certstrap-github-release/certstrap*linux-amd64 builddir/certstrap
            cp golang-s3-release/go-linux-amd64.tar.gz builddir/go.tar.gz
            cp kf-s3-release/kf-linux builddir/kf
            cp aws-cli-s3-release/awscli-exe-linux-x86_64.zip builddir/awscli-exe-linux-x86_64.zip
            tar -C builddir -xzf credhub-cli-github-release/credhub-linux-*.tgz
            cp kubectl-s3-release/kubectl builddir/kubectl
            cp helm-s3-release/helm builddir/helm
            cp cosign-s3-release/cosign.deb builddir/cosign.deb
            tar -xzf yaml2json-github-release/yaml2json_*_linux_amd64.tar.gz yaml2json -C builddir
            tar -xzf golangci-lint-release/golangci-lint-*-linux-amd64.tar.gz
            mv golangci-lint-*-linux-amd64/golangci-lint builddir/golangci-lint
            mv bbr-release/bbr-s3-config-validator*-linux-amd64 builddir/bbr-s3-config-validator
            cp bbr-release/bbr-*-linux-amd64 builddir/bbr
            cp kapp-github-release/kapp-linux-amd64 builddir/kapp
            cp kbld-github-release/kbld-linux-amd64 builddir/kbld
            cp ytt-github-release/ytt-linux-amd64 builddir/ytt

  - put: pcfops-image
    params:
      build: builddir
      tag_file: pcfops-docker-tag/version
      tag_as_latest: true
    get_params: {skip_download: true}

  - put: pcfops-github
    params:
      repository: pcfops-github
      tag: pcfops-docker-tag/version
      only_tag: true
  - put: pcfops-docker-tag
    params: {file: pcfops-docker-tag/version}
